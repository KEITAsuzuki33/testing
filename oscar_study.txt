https://developer.mozilla.org/ja/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript

オブジェクト指向　
	実世界を元にしたモデルの作成に抽象化を使用する、プログラミングの考え方
	OOP はソフトウェアを関数の集まりや単なるコマンドのリスト（これまでの伝統的な見方）としてではなく、協調して動作するオブジェクトの集まりであると考えます。OOP では、各々のオブジェクトがメッセージを受信し、データを処理し、また他のオブジェクトへメッセージを送信できます。各々のオブジェクトは明確な役割や責任を持つ、独立した小さな機械であると見なせます。

	継承
	1 つ以上のクラスを特化したバージョンとしてクラスを作成する方法です（JavaScript は単一継承のみサポートしています）。特化したクラスは一般的に子と呼ばれ、またそれ以外のクラスは一般的に親と呼ばれます。JavaScript では親クラスのインスタンスを子クラスに代入して、特化させることにより継承を行います。現代のブラウザでは、継承の実装に Object.create を使用することもできます。

	カプセル化

	前の例では、Person クラスによる walk() メソッドの実装状況を Student が知らなくても、そのメソッドを使用できました。Student クラスは変更の必要がない限り、そのメソッドを明示的に定義する必要はありません。すべてのクラスのデータとメソッドがひとつのユニットに収められていることから、これをカプセル化と呼びます。

	情報を隠蔽することは、他の言語でも private または protected 	なメソッドやプロパティという形で一般的な機能です。JavaScript でも同様のことをシミュレートできますが、オブジェクト指向プログラミングに必須というわけではありません。




DIとは
	オブジェクトの注入

DIを使う利点
　・モジュール間の依存関係を弱め、保守性を高くすることができる。
　・
　　DIコンテナとは
		xxに「このクラスのオブジェクトを注入してね」という設定を書いておくとそれを実行してくれるフレームワークのこと


ポリモーフィズムとは、プログラミング言語の型システムの性質を表すもので、プログラミング言語の各要素（定数、変数、式、オブジェクト、関数、メソッドなど）についてそれらが複数の型に属することを許すという性質を指す。ポリモルフィズム、多態性、多相性、多様性とも呼ばれる。
別々のクラスが同じメソッドやプロパティを定義可能であることを表します。
すべてのメソッドやプロパティが prototype プロパティの内部で実装されているのと同じように、異なるクラスで同じ名前のメソッドを定義できます。メソッドは 2 つのクラスに親子関係（すなわち、あるクラスが別のクラスから継承されている）がない限り、自身が定義されたクラスに収められます。



GoF 

GoFとは、Gang of Fourの略で、エリック・ガンマ、リチャード・ヘルム、ラルフ・ジョンソン、ジョン・ブリサイズの 4 人を指します。

①再利用性の高い柔軟な設計ができるようになる
　 デザインパターンの多くは再利用性の高い柔軟な設計を目指しています。多くの熟練開発者の「知恵」が 詰まったデザインパターンを知ることで、経験がまだ少ない開発者も設計のヒントを多くもらうことがで きるでしょう。また、直接デザインパターンを使わなかったとしても、デザインパターンを理解すること で「設計力」を高めていき、より良いコードが書けるようになっていくことは、技術者として成長していく 楽しみにもつながることでしょう。

②共通の言葉を使って会話ができるようになる
　 デザインパターンをお互いが共通理解しているチームでは、パターン名を使った会話が交わされるように なります。「この3つの処理は共通処理をテンプレートパターンで実装しよう」「このロジックはあとで 変更があってもよいようにファクトリメソッドにしといてよ」といった感じです。これによりコミュニケ ーションは円滑になり、ミーティングにかける時間も大幅に短縮されることでしょう。現在、デザインパ ターンをまったく使わないJavaプロジェクトというのはまず考えられませんので、デザインパターンをチーム 全体が知っていることによるメリットは大きいと言えるでしょう。

③オブジェクト指向が理解できる
　これは筆者が感じたメリットです。一般的ではないかもしれませんし、反論もあることを承知でご説明しま す。デザインパターンはオブジェクト指向の基本の上に成り立っています。良いデザインパターンのサンプル は、良いオブジェクト指向プログラミングのサンプルでもあります。実プロジェクトではなかなか経験できな い「凝った設計を試すこと」で、オブジェクト指向に対する視野が広がることでしょう。デザインパターンの 学習により、オブジェクト指向の理解が深まるという、一石二鳥の学習効果があるのではないでしょうか。

 ・ファクトリー
	インスタンスの作り方をスーパークラスで定め、具体的な処理をサブクラスで行うパターン

 ・アダプター
 	異なるインターフェースを持つクラスの間にはさむことによってクラス間をつなげる役目をするのが、Adapterパターンです

 ・オブザーバー
 	あるオブジェクトの状態が変化した時に、関係する他のすべてのオブジェクトに通知とそれに応じた処理を行わせる。

 ・リテレーターパターン
 	
	単語自体は繰り返す、反復するなどの意味を持ち、集約したオブジェクトを列挙する手段を提供するデザインパターンです。
	次のような場合にIteratorパターンに準拠して実装するべきだと考えられます。

	アプリケーション固有なデータ、構造を持ったオブジェクトにアクセスをする場合
	配列やコレクションなどの集合する要素にアクセスする場合(配列はforループで回せるが、リストなどのコレクションは難しかったりする)
	集合の要素に順次にアクセスする必要がある場合

ネームスペース
https://qiita.com/7968/items/1e5c61128fa495358c1f
	開発者があらゆる機能をアプリケーション固有の一意な名前にまとめることができる一種の容器のことです
	名前の集合を分割することで衝突の可能性を低減しつつ参照を容易にする概念である。
	Namespaceの実体は、要素や属性の名前の集合です。ちょうど「日本語」が、「あめ」や「橋」や「行く」などの言葉の集まりであるのと同じです。

XML 
	タグ名を自由につけることができるHTMLみたいなやつ

MCV
	M...method 
	C...controler
	V...view
